// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]
    output          = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * recipes/prisma
 */
model User {
    id             Int      @id @default(autoincrement())
    email          String   @unique
    recoveryEmails String[]
    name           String?
    titles         Json?
    posts          Post[]
    ownedGroups    Group[]  @relation("Owner")
    groups         Group[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Group {
    id      Int    @id @default(autoincrement())
    name    String @unique
    owner   User   @relation("Owner", fields: [ownerId], references: [id])
    ownerId Int
    users   User[]
}

model Post {
    id         Int        @id @default(autoincrement())
    slug       String     @unique
    title      String
    content    String?
    published  Boolean    @default(false)
    author     User       @relation(fields: [authorId], references: [id])
    authorId   Int
    categories Category[]
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String @unique
    posts Post[]
}

model Event {
    id      Int      @id @default(autoincrement())
    name    String
    startAt DateTime
}

/**
 * Cerbos Authoization
 */
model Member {
    id          String        @id
    roles       Role[]
    Performance Performance[]
}

model Role {
    id          String   @id
    superRoleId String?
    superRole   Role?    @relation("Hierarchy", fields: [superRoleId], references: [id])
    subRoles    Role[]   @relation("Hierarchy")
    members     Member[]
}

model Performance {
    id      Int    @id @default(autoincrement())
    score   Int
    owner   Member @relation(fields: [ownerId], references: [id])
    ownerId String
}

model TestBigInt {
    id    Int    @id @default(autoincrement())
    value BigInt
}

/**
 * lifecycle
 */
model Lifecycle {
    id    Int @id @default(autoincrement())
    value Int
}

/**
 * test connect or create
 */
model TestConnectOrCreateOrder {
    id        Int                        @id @default(autoincrement())
    product   TestConnectOrCreateProduct @relation(fields: [productId], references: [id])
    productId Int

    @@index([productId])
}

model TestConnectOrCreateProduct {
    id                       Int                        @id @default(autoincrement())
    name                     String                     @unique
    testConnectOrCreateOrder TestConnectOrCreateOrder[]
}

// model RetailSalesDataBatch {
//     id              Int               @id @default(autoincrement())
//     retailSalesData RetailSalesData[]
//     createdAt       DateTime          @default(now())
// }

model RetailSalesData {
    id            BigInt                     @id @default(autoincrement())
    // retailSalesDataBatch RetailSalesDataBatch       @relation(fields: [batchId], references: [id])
    // batchId              Int
    date          DateTime
    receiptType   RetailSalesDataReceiptType @relation(fields: [receiptTypeId], references: [id])
    receiptTypeId Int
    client        RetailSalesDataClient      @relation(fields: [clientId], references: [id])
    clientId      Int
    department           RetailSalesDataDepartment       @relation(fields: [departmentId], references: [id])
    departmentId         Int
    sku                  RetailSalesDataSku              @relation(fields: [skuId], references: [id])
    skuId                Int
    nameZhCn             String
    salesVolume          Float
    platformAddress      RetailSalesDataPlatformAddress? @relation(fields: [platformAddressId], references: [id])
    platformAddressId    Int?
    platformOrderId      String
    storehouse           RetailSalesDataStorehouse       @relation(fields: [storehouseId], references: [id])
    storehouseId         Int
    // category             RetailSalesDataCategory?        @relation(fields: [categoryId], references: [id])
    // categoryId           Int?
    // taxInclusivePriceCny Float?
    // priceCny             Float?
    // unitPriceCny         Float?
    // @@index([clientId])
    // @@index([departmentId])
    // @@index([skuId, nameZhCn])
    // @@index([salesVolume])
    // @@index([platformAddressId])
    // @@index([platformOrderId])
    // @@index([storehouseId])
    // @@index([categoryId])
    // @@index([taxInclusivePriceCny])
    // @@index([priceCny])
    // @@index([unitPriceCny])

    /**
     * indexes
     */
    // @@index([batchId])
    @@index([date])
    @@index([receiptTypeId])
}

model RetailSalesDataReceiptType {
    id              Int               @id @default(autoincrement())
    type            String            @unique
    retailSalesData RetailSalesData[]
}

model RetailSalesDataClient {
    id              Int               @id @default(autoincrement())
    client          String            @unique
    retailSalesData RetailSalesData[]
}

model RetailSalesDataDepartment {
    id              Int               @id @default(autoincrement())
    department      String            @unique
    retailSalesData RetailSalesData[]
}

model RetailSalesDataSku {
    id              Int               @id @default(autoincrement())
    sku             String            @unique
    retailSalesData RetailSalesData[]
}

model RetailSalesDataPlatformAddress {
    id              Int               @id @default(autoincrement())
    platformAddress String            @unique
    retailSalesData RetailSalesData[]
}

model RetailSalesDataStorehouse {
    id              Int               @id @default(autoincrement())
    storehouse      String            @unique
    retailSalesData RetailSalesData[]
}

// model RetailSalesDataCategory {
//     id              Int               @id @default(autoincrement())
//     category        String            @unique
//     retailSalesData RetailSalesData[]
// }
