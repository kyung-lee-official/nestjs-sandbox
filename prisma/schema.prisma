// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * recipes/prisma
 */
model User {
    id             Int      @id @default(autoincrement())
    email          String   @unique
    recoveryEmails String[]
    name           String?
    titles         Json?
    posts          Post[]
    ownedGroups    Group[]  @relation("Owner")
    groups         Group[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Group {
    id      Int    @id @default(autoincrement())
    name    String @unique
    owner   User   @relation("Owner", fields: [ownerId], references: [id])
    ownerId Int
    users   User[]
}

model Post {
    id         Int        @id @default(autoincrement())
    slug       String     @unique
    title      String
    content    String?
    published  Boolean    @default(false)
    author     User       @relation(fields: [authorId], references: [id])
    authorId   Int
    categories Category[]
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String @unique
    posts Post[]
}

model Event {
    id      Int      @id @default(autoincrement())
    name    String
    startAt DateTime
}

/**
 * Cerbos Authoization
 */
model Member {
    id          String        @id
    roles       Role[]
    Performance Performance[]
}

model Role {
    id          String   @id
    superRoleId String?
    superRole   Role?    @relation("Hierarchy", fields: [superRoleId], references: [id])
    subRoles    Role[]   @relation("Hierarchy")
    members     Member[]
}

model Performance {
    id      Int    @id @default(autoincrement())
    score   Int
    owner   Member @relation(fields: [ownerId], references: [id])
    ownerId String
}

model TestBigInt {
    id    Int    @id @default(autoincrement())
    value BigInt
}

/**
 * lifecycle
 */
model Lifecycle {
    id    Int @id @default(autoincrement())
    value Int
}

/**
 * test connect or create
 */
model TestConnectOrCreateOrder {
    id        Int                        @id @default(autoincrement())
    product   TestConnectOrCreateProduct @relation(fields: [productId], references: [id])
    productId Int
}

model TestConnectOrCreateProduct {
    id                       Int                        @id @default(autoincrement())
    name                     String
    testConnectOrCreateOrder TestConnectOrCreateOrder[]
}
